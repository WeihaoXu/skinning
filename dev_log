Done reading joints from model files. Next step is to implement bone selection? Figure out what jid0, jid1 mean.
- In all the provided shaders, jid0 and jid1 only appear in blending.vert. They are used for skinning. 

The draw_line approach for bones is not correct. Should create cylinder geometry for the bones.

The starter code has already provided create_cylinder_mesh() function to create cylinder vertices and faces. It's a cylinder aligning with x axis, ranging (-0.5, 0.5). Inorder to use this cylinder as our bones, we need to translate, rotate and scale it.


- The position and orientation in each joint object are both in world coordinates? 


successfully made use of geometry shader to draw "cylinders". (not really cylinder, but the vertices created by create_cylinder_mesh. Need to transform them into cylinder shape in cylinder_vert_shader)


Spent one hour to debug: pass transform matrix into cylinder shader. Problem: in the lambda for bone_transform_data, returned the pointer of a temporary matrix, which expires once outside the scope!!!


I spents about 4 hours to finally figure out the use of the attributes in Joints class. The key is the formular in slides and the tutorial in homework page. 
- glm::vec3 position: the position of current joint in world coordidates. It is passed into shaders. We need to keep it updated whenever the pose is touched. How? recursively Di * Bij(based on init positions) * T(manually deforms) * (local coords (calculated with current orientations).)

- glm::vec3 init_position: the init position loaded from pmd files. We can use the init_position of two jions to calculate the translation between the coords of two joints. Keep in mind that this translation will never change.

- glm::orientation: basically the direction from parent's position to current_joint's position. Use it to rotate our cylinder. We need to keep it updated during deforms.

- glm::rel_orientation: the rotation made by deforms(actually the T in formulas). Use it to calculate orientation and position. Initialized as identity.


Finished drawing cylinders for bones. Next: do dragging control. How to calculate the quaternion of dragging? Problem: the mouse x, y coordinates are 2-D, but we need a 3-D rotation.
- Solution1: rotate in the plane perpendicular to the ray shooting from eye_ to the joint. 
	-- How compute angle? 
	Try1: project position to 2-D. Calculate the rotation angle theta in 2D. Rotate the joint in 3-D about eye_-joint ray by theta. 

- Solution2: Actually by unProjecting we can get 3-D coords of mouse position. So we can just use two directs to compute coords.


